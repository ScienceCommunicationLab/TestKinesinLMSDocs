{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KinesinLMS","text":"<p>KinesinLMS is a simple open-source Learning Management System (LMS) built with the sole developer in mind.</p> <p>It's written in Django and tries hard to make it easy for a single developer (or small development team) to understand things quickly, get things set up with minimal fuss, and remain free to extend the app in novel ways.</p> <p>The key features are:</p> <ul> <li>Simple: \"Just enough\" LMS to get you started on creating something interesting and engaging. It's not a   full-featured LMS, but it's a good starting point.</li> <li>Grokkable: A primary focus of KinesinLMS is to fit entirely inside one developer's head. It tries hard to avoid   complex frameworks and dependencies, and to keep the codebase small and understandable. For example, more HTMx, less   React.</li> <li>Forgettable: For those dependencies and infrastrucutre components that are necessary, KinesinLMS tries to use   basic, boring, tried-and-true dependencies to do cool things. Boostrap for styling, only one postgres database for all   things storage, etc. When you forget how a dependency or compontent works, it should be easy to look up and remember.</li> </ul>"},{"location":"contributing/","title":"Contributing to KinesinLMS","text":"<p>( Content to come...)</p>"},{"location":"architecture/api/","title":"KinesinLMS API","text":""},{"location":"architecture/api/#overview","title":"Overview","text":"<p>The KinesinLMS API is a RESTful API implemented using Django Rest Framework (DRF).</p> <p>There are two basic sets of API endpoints for kinesinlms.</p> <ol> <li>\"Internal\" endpoints: The first is for components within KinesinLMS that need to access the site via API, such as    \"Simple Interactive Tool\" components, which load their initial data and submit student activity via API.</li> <li>\"Analytics\" endpoints: The second is for the external applications that need analytics data.</li> </ol> <p>Both sets of endpoints are configured in the top-level <code>config/urls.py</code> module.</p>"},{"location":"architecture/api/#internal-endpoints","title":"Internal Endpoints","text":"<p>At the moment, the main use of \"internal\" API endpoints are the React-based video component and simple interactive tools that we load in a course unit page.</p> <p>Internal endpoints are configured in the Router under <code>router = routers.DefaultRouter()</code></p> <p>A call to an endpoint here starts with <code>/api/</code></p>"},{"location":"architecture/api/#analytics-endpoints","title":"Analytics Endpoints","text":"<p>Analytics endpoints are meant to be called by an external resource -- the kinesinlms-analytics app -- and therefore use the default token-based authentication provided by DRF.</p> <p>A call to an endpoint in this group starts with <code>/api/analytics/</code></p>"},{"location":"architecture/architecture_overview/","title":"Architecture Overview","text":"<p>( Content to come...)</p>"},{"location":"architecture/database/","title":"Database","text":"<p>( Content to come...)</p>"},{"location":"architecture/env_variables/","title":"Environment Variables","text":"<p>Most configuration information is stored in the KinesinLMS database. However, some information that is secret and shouldn't be stored in the DB, is by convention stored in the environment alongside the usual Django settings.</p> <p>The following environment variables should be configured if the user wants to use various services.</p> <p>For an example of how to set these variables, see the <code>env.example</code> file in the root of the project.</p>"},{"location":"architecture/env_variables/#email-service","title":"Email Service","text":"<p>To send email directly, Django must be configured to use an email gateway. IMPORTANT: Along with setting the following environment variable. The correct variant of the AnyMail library must be set in production.txt, and AnyMail configured in production.py</p> <p>EMAIL_SERVICE_TOKEN=\"(some API key from email service)\"</p>"},{"location":"architecture/env_variables/#email-automation-provider","title":"Email Automation Provider","text":"<p>If an email automation provider is being used, most information will be stored in the EmailAutomationProvider model. However, the following should be set and stored in the environment:</p> <p>EMAIL_AUTOMATION_PROVIDER_API_KEY=\"(some API key from email automation service)\"</p>"},{"location":"architecture/env_variables/#survey-provider","title":"Survey Provider","text":"<p>If a survey provider is being used, most information will be stored in the SurveyProvider model. However, the following should be set and stored in the environment:</p> <p>SURVEY_PROVIDER_API_KEY=\"(some api key from survey provider)\"</p>"},{"location":"architecture/env_variables/#forum-provider","title":"Forum Provider","text":"<p>If a forum provider is being used, most information will be stored in the ForumProvider model. However, the following should be set and stored in the environment:</p> <p>FORUM_API_KEY=\"(some API key from forum provider service)\" FORUM_SSO_SECRET=\"(some SSO secret from forum provider service)\" FORUM_WEBHOOK_SECRET=\"(some webhook secret from forum provider service)\"</p>"},{"location":"architecture/env_variables/#badge-provider","title":"Badge Provider","text":"<p>If a badge provider is being used, most information will be stored in the BadgeProvider model. However, the following should be set and stored in the environment:</p> <p>BADGE_PROVIDER_USERNAME=\"(some username from badge provider service)\" BADGE_PROVIDER_PASSWORD=\"(some password from badge provider service)\"</p>"},{"location":"architecture/env_variables/#other-integrations","title":"Other Integrations","text":"<p>If you use Sentry (highly recommended), set the DSN for your project in the SENTRY_DSN environment variable.</p> <p>SENTRY_DSN=\"(some DSN from Sentry)\"</p> <p>If you have recaptcha set up with google, you can configure it with the following:</p> <p>RECAPTCHA_USE_RECAPTCHA=False RECAPTCHA_PUBLIC_KEY=(some public key) RECAPTCHA_PRIVATE_KEY=(some private key)</p>"},{"location":"architecture/env_variables/#other-env-variables","title":"Other Env Variables...","text":"<p>For more infomation on other standard environment variables to configure Django and Celery, see the .env.example file in the root of the project.</p>"},{"location":"architecture/event_tracking/","title":"Event Tracking","text":""},{"location":"architecture/event_tracking/#event-tracking-requirements","title":"Event Tracking Requirements","text":"<p>A few simple requirements helped shape the way we're capturing and logging events.</p> <p>1) Handle Client or Server Origin: Most of the events we need to track can be captured and handled on the server. But    some we want to get directly from the client, for example video play and pause events from the YouTube player. So    we've created an    API endpoint for our client components to send tracking event data.</p> <p>2) Delivery to 'Somewhere Else' for Handling: External services will want to do different things    based on events (e.g. send email, send a message to slack, etc.), and we're going to expect that this logic    lives somewhere else and not in the LMS. So we'll use Celery tasks to do async sends to...somewhere! At the moment    it's an API endpoint at Amazon that that leads to a Lambda function, but this external target could be genericized in    the Celery task method. Since we're running on Heroku, I wasn't able to just write the events to a log and use AWS    CloudWatch    agent to pick up those log lines. But if you're running on your own server and can install the AWS CloudWatch agent,    writing tracking events to a separate log is another way of getting these events into AWS for further processing.</p>"},{"location":"architecture/event_tracking/#tracker-class","title":"Tracker Class","text":"<p>This class encapsulates the code necessary to send off an event to ...somewhere.</p> <p>It provides one method, <code>track</code>, which should be called from wherever something interesting happens that we want to track: a registration, an enrollment, an assessment entry, etc.</p> <p>The <code>track</code> function takes the following arguments:</p> <ul> <li><code>event_type</code> : An event type. Must be one of the constant strings defined in event_types.py</li> <li><code>user</code> : A user object, perhaps pulled from the request or from a model class.</li> <li><code>data</code> : A dictionary that takes on different properties depending on the <code>event_type</code></li> <li><code>course_content_node</code> : The course node this event took place in, if applicable (registration events don't have a   course node).</li> </ul>"},{"location":"architecture/event_tracking/#tracking-api-endpoint","title":"Tracking API endpoint","text":"<p>React components running in the client can send POST events to the <code>/api/tracking</code> endpoint to register events originating on the client. There's no library yet so each component just constructs it's own POST request (See the VideoPlayer.tsx component for an example).</p> <p>The JSON payload must look like this:</p> <pre><code>{\n  \"tracking_event_type\": \"video\",\n  \"node_id\": this.state.nodeID,\n  \"event_data\": {\n    \"video_id\": this.state.videoID,\n    \"video_event_type\": videoEventType\n  }\n}\n</code></pre> <p>The <code>event_data</code> portion is the part that will change depending on the type of event. For video activity it's always just the two properties you see above.</p> <p>All validation of incoming events through the API is done by Django Rest Framework. Following best practice ('thick serializers, thin views`), the serializer itself handles calling the Tracker rather than saving a model instance. Perhaps in the future I'll refactor that logic into a helper class.</p>"},{"location":"architecture/event_tracking/#event-structure","title":"Event Structure","text":"<p>All events will have the following basic JSON shape.</p> <pre><code>{\n    \"event_type\": (some event type)\n    \"anon_username\": (anonymized username, from anon_username field in user model),\n    \"time\": (format like 2014-03-03T16:19:05.584523+00:00)\n    \"course_slug\": (course slug),\n    \"course_run\": (run),\n    \"module_id\": (module id),\n    \"section_id\": (section id),\n    \"unit_id\": (unit id),\n    \"page_url\": (the page URL)\n    \"event_data\": {\n        (All data related to this event type. Structure depends on event type...see definitions below.)\n    }\n\n}\n\n</code></pre>"},{"location":"architecture/event_tracking/#time","title":"time:","text":"<p>This is the UTC time when the event was recorded. It will be in \u2018YYYY-MM-DDThh:mm:ss.xxxxxx\u2019 format.</p>"},{"location":"architecture/event_tracking/#types-of-events","title":"Types of events","text":""},{"location":"architecture/event_tracking/#definition-registration","title":"Definition: Registration","text":""},{"location":"architecture/event_tracking/#definition-course-enrollment-activateddeactivated","title":"Definition: Course Enrollment Activated/Deactivated","text":""},{"location":"architecture/event_tracking/#definition-assessment-submitted","title":"Definition: Assessment Submitted","text":""},{"location":"architecture/event_tracking/#definition-video-events","title":"Definition: Video events","text":""},{"location":"architecture/event_tracking/#logging-events","title":"Logging Events","text":""},{"location":"architecture/event_tracking/#aws-lambda","title":"AWS Lambda:","text":"<p>I was trying to write directly to a log file and get logs into AWS that way, but using Heroku log drain wasn't straightforward (involved using a helper app to receive events, parse and then send along to AWS).</p> <p>So I'm switching to having Tracker issue requests directly to Lambda function via API Gateway, using Celery to avoid affecting response time.</p> <p>Some articles that are helpful:</p> <ul> <li>https://devcenter.heroku.com/articles/celery-heroku</li> <li>(older but useful?) https://drdaeman.github.io/heroku-djcelery-example/ </li> </ul>"},{"location":"architecture/html_content_tags/","title":"HTML Content Tags","text":"<p>(Content to come on the small subset of template tags that can be used in html_content fields.)</p>"},{"location":"architecture/styles/","title":"Styles","text":"<p>KinesinLMS uses Bootstrap 5.3 for basic styles and layout.</p> <p>Additional styles are defined in the <code>kinesinlms/static/scss</code> directory. These styles are collected into one <code>project.scss</code> file, which is compiled into <code>kinesinlms/static/css/project.css</code> via sass.</p>"},{"location":"architecture/styles/#compiling-styles","title":"Compiling Styles","text":"<p>Prerequisite: You must have <code>sass</code> installed and availble on the command line.</p> <p>To compile the styles, run the following command from base project directory.</p> <pre><code>sass --watch kinesinlms/static/scss:kinesinlms/static/css --style compressed --load-path=node_modules\n</code></pre> <p>This command is also available in the <code>package.json</code> file as the <code>watch-styles</code> script. To run it from the root of the project, use:</p> <pre><code>npm run watch-styles\n</code></pre>"},{"location":"architecture/system_email/","title":"System Email","text":"<p>( Content to come...)</p>"},{"location":"architecture/system_email/#survey-reminder-emails","title":"Survey Reminder Emails","text":"<p>( Content to come...)</p>"},{"location":"architecture/system_email/#automating-survey-reminder-emails","title":"Automating Survey Reminder Emails","text":"<p>There's simple management command that will send out any current survey reminder emails.</p> <p>Ideally this command would be run once a day, but it could be run more or less frequently if desired.</p> <p>One way to run it daily is to set up a chron command to run the management command.</p> <p>To run the task manually: ::</p> <pre><code> heroku run python manage.py survey_emails --remote production\n</code></pre> <p>On heroku, you can use the use Heroku Advanced Scheduler to run the task each day.</p> <p>Setting this up is outside the scope of these docs. You can find more information here.</p> <p>Once you have an advanced scheduler set up, you can view the automated task's logs: ::</p> <pre><code>heroku logs -t -a (your app name) -d advanced-scheduler\n</code></pre>"},{"location":"architecture/testing/","title":"Testing","text":"<p>( Content to come...)</p>"},{"location":"badges/badges_overview/","title":"Badges Overview","text":"<p>\"Open Badges\" are digital images (usually .png or .svg format) that encode accomplishments in a standardized format. Information about the accomplishment that earned that badge, including who earned it and the criteria involved, is cryptographically signed and embedded in the image.</p> <p>Using cryptography to encode this information allows the badge to be verified as authentic and to be shared reliably across the web. Badges can be displayed on social media, in email, on websites, and in digital portfolios. They can also be collected and displayed in a \"backpack\" or \"passport\" system, such as Badgr.com, Mozilla Backpack, or Open Badge Passport.</p> <p>The open badges architecture is governed by a published, evolving standard, currently at version 2.1.</p> <p>The use of badges as a reward system in online courses has been shown to encourage user interaction with courses and improve course completion rates.</p> <p>KinesinLMS provides a \"BadgeProvider\" class to define a third-part badge provider. At the moment, the only provider supported is for Badgr.com.</p> <p>To award badges for things like course completion, you'll need to create an account on Badgr.com and then set up BadgeProvider in KinesinLMS to represent that account.</p> <p>Then, for every badge you want to award, you'll need to set up what's called a \"badge class\" in Badgr, and then copy that information into a badge class on KinesinLMS.</p> <p>At the moment, KinesinLMS only supports awarding badges for course completion. However, the architecture is designed to be extensible, so it should be possible to add support for other types of badges in the future.</p> <p>More resources on Open Badges:</p> <ul> <li>What are Open Badges</li> <li>Getting Started with Open Badges and Open Microcredentials</li> <li>Open Badges</li> </ul>"},{"location":"badges/creating_badge_class/","title":"Creating a Course Completion Badge","text":"<p>You can create a badge class to represent course completion in KinesinLMS. This badge class will be used to award a badge to students who complete a course.</p> <p>In digital badges, each badge that a student can earn is represented by a \"badge class.\" You can think of a badge class as a template for a badge. It contains the information about the badge, such as the name, description, and criteria for earning it.</p> <p>When a student earns that badge, a \"badge assertion\" is made for that badge class, linking the student to the achievement.</p>"},{"location":"badges/creating_badge_class/#creating-a-badge-class-for-coures-completion","title":"Creating a Badge Class for Coures Completion","text":"<p>To create a badge for course completion, you'll need to have already set up a Badge Provider in the KinesinLMS admin panel. If you haven't done that yet, see the Badge Provider Integration documentation. You'll also need to have an account on Badgr.com and have set up an issuer for your KinesinLMS site.</p> <p>Each badge is composed of two parts:</p> <ul> <li>A badge class created in the external badge provider (e.g. Badgr.com)</li> <li>A badge class instance set up in KinesinLMS</li> </ul>"},{"location":"badges/creating_badge_class/#creating-the-badge-class-on-badgrcom","title":"Creating the Badge Class on Badgr.com","text":"<p>To create a badge class on Badgr.com, you'll need to log in to your Badgr.com account and then create a new badge class for your course.</p> <p>Here's how to do that:</p> <ul> <li>Log in to your Badgr.com account</li> <li>Click the \"Create Badge\" button</li> <li>Add a name for the badge, an image (make sure you have the correct usage rights for the image), a description of the   badge, and any earning criteria you want to add.</li> </ul> <p>You also must add a URL that points to a \"Criteria URL\" that explains the criteria for the badge in more detail. Every course in KinesinLMS has a default \"Criteria URL\" that you can use for this purpose. The URL is in the format <code>https://(your website url)/catalog/(course slug)/(course run)/criteria/</code>.</p> <p>Once you've created the badge class on Badgr.com, you'll need to copy the information from the badge class into a badge class on KinesinLMS.</p> <p>Open the badge class on Badgr.com and click the \"View JSON\" button at the bottom of the page. This will show you the JSON for the badge class. You'll need to copy the information from the JSON into a new badge class on KinesinLMS.</p> <ul> <li>The \"Open Badge ID\" of the badge. This is a full URL that represents the badge class. It will look something like   this:   <code>https://api.badgr.io/public/badges/(long badge class ID string)</code></li> <li>The Exteranl Entity ID for the badge class. In Badgr's case, this is just the \"long ID string\" from the above URL.</li> <li>The URL of the badge image. In Badgr's case, this is just like the Open Badge ID, with <code>/image</code> at the   end. `https://api.badgr.io/public/badges/(long badge class ID string)/image</li> </ul>"},{"location":"badges/creating_badge_class/#create-the-badge-class-on-kinesinlms","title":"Create the Badge Class on KinesinLMS","text":"<p>Now that you have a badge class created on Badgr, you need to create a badge class on KinesinLMS to represent it.</p> <p>Here's how to do that:</p> <ul> <li>Open the course in Composer.</li> <li>Go to the \"Badges\" tab.</li> <li>Click \"Add Badge Class\"</li> <li>Add the information copied from the badge class on Badgr.com into the form fields.</li> </ul> <p>You can also add a description and criteria information on this page. The criteria information will be displayed to</p>"},{"location":"badges/creating_badge_class/#badge-criteria","title":"Badge Criteria","text":"<p>As mentioned above, every course has a default \"Criteria URL\" that you can use to explain the criteria for passing the course. You an use this URL in a \"passed course\"-type badge.</p> <p>Any criteria added to the badge class will be shown in the \"criteria\" box on this page.</p>"},{"location":"badges/creating_badge_class/#user-status","title":"User Status","text":"<p>When the system is live and students are earning badges, you can see a complete list of earned badge assertions on the admin panel: <code>https://(your app url)/admin/badges/badgeassertion/</code></p>"},{"location":"badges/provider_integration/","title":"Badge Provider Integration","text":"<p>In order to award badges, you'll need to integrate with a third-party badge service. We've chosen to create an integration with Canvase Badgr, which is a free service that provides a simple API for awarding badges. The <code>BadgrBadgeService</code> class implements the Badgr API such that Badges can be awarded upon certain events, like passing a course.</p> <p>If you want to use a different service, you'll need to create a new subclass of the <code>BadgeService</code> class to implement the new service, and potentailly update or subclass <code>BadgeProvider</code> to match. You'll also need to add a new name and value pair to <code>BadgeProviderType</code> enum to represent your integration.</p>"},{"location":"badges/provider_integration/#setting-up-an-account-at-badgrcom","title":"Setting Up an Account at Badgr.com","text":"<p>You can create a free accont at Badgr.com here: https://badgr.com/auth/signup</p> <p>After you do, use the Badgr.com admin website to create an \"issuer\" for your KinesinLMS site.</p> <p>You'll need the issuer \"ID\" in the next step. To get it, go to the \"public\" page for the issuer and then click \"View JSON\" button at the bottom of the page. This will show you the JSON for the issuer, and the \"id\" field is the full path for the issuer ID. It will look something like this: <code>https://api.badgr.io/public/issuers/(some long string)</code></p> <p>That final long string is the issuer \"ID\" and the sting you'll need in the next step. So copy it and hold on to it for the next step.</p>"},{"location":"badges/provider_integration/#setting-up-the-badge-provider","title":"Setting up the Badge Provider","text":"<p>Once you've created a new Badgr.com account and an issuer, you can set up your Badge Provider in the KinesinLMS admin panel.</p> <p>The first step is to set the two environment variables for your login credentials: BADGE_PROVIDER_USERNAME=(your username) BADGE_PROVIDER_PASSWORD=(your password)</p> <p>Then create a Badge Provider in the KinesinLMS management panel. Here's how:</p> <ol> <li>Go to the Badge Providers admin page: <code>https://(your app url)/management/badge_provider/</code></li> <li>Add \"Badgr\" as the name of the provider.</li> <li>Set the \"type\" to \"Badgr\".</li> <li>Create a slug for this provider. <code>badgr</code> is a good choice.</li> <li>Set the \"api url\" to <code>https://api.badgr.io/</code></li> <li>Create a random \"salt\" string.</li> <li>Add the issuer ID from the last step in the \"Issuer entity ID\" field</li> </ol> <p>You can leave the \"Access token\" and \"Refresh token\" fields blank for now. They will be filled in automatically when the badge provider first accesses the Badgr API.</p>"},{"location":"badges/provider_integration/#creating-badge-classes","title":"Creating Badge Classes","text":"<p>Now that you have a connection with Badgr, you can set up what are called \"badge classes\" to represent achievements. Badge classes are represented in KinesinLMS with the <code>BadgeClass</code> model.</p> <p>Read the Creating a Badge Class for Course Completion documentation for more information on how to set up a badge class for course completion.</p>"},{"location":"course/block_resources/","title":"Block Resources","text":"<p>Block resources are files that are used to supplement a Block's main content. They are uploaded by the course author and used either directly in the Block's html content. For example, a .png image file can be a block resource to an HTML Block, while a video transcription .txt file can be a resource for a VideoBlock.</p>"},{"location":"course/block_resources/#block-resource-types","title":"Block Resource Types:","text":"<p>There are only three types of Blocks at the moment:</p> <ul> <li>IMAGE (for a Block's HTML content)</li> <li>VIDEO_TRANSCRIPT (for a VideoBlock)</li> <li>GENERIC (for any other type of Block...this is currently a placeholder)</li> </ul> <p>Block resource information is stored in the Resource model, and the file itself is stored in the Django media folder via the model's <code>resource_file</code> property. The resource is linked into one or more Blocks where it is used via the BlockResource join model...this allows one resource to be used in multiple Blocks across different courses. Each Resource  instance gets a unique uuid. </p> <p>When possible, the author should try to re-use an existing Resource rather than upload the same resource multiple times when authoring a course.</p>"},{"location":"course/block_resources/#resources-during-course-import","title":"Resources During Course Import","text":"<p>When importing a course, if the uuid of a resource contained in the imported course archive already exists in the database, the existing Resource is used.</p> <p>If the uuid does not exist, a new Resource is created, even if a resource with the same name already exists in the media folder. (In the case the file name will be updated to be unique.)</p>"},{"location":"course/blocks/","title":"Blocks","text":"<p>( Content to come...)</p>"},{"location":"course/course_overview/","title":"Course Overview","text":"<p>( Content to come...)</p>"},{"location":"course_authoring_guide/course_authoring_guide_overview/","title":"Course Authoring Overview","text":"<p>( Content to come... )</p>"},{"location":"course_authoring_guide/creating_a_course/","title":"Creating a Course","text":"<p>( Content to come... )</p>"},{"location":"course_authoring_guide/using_template_tags/","title":"Using Template Tags","text":"<p>KinesinLMS supports a small number of Django template tags in the HTML content portions of the course. These tags are used to insert dynamic content into the course content.</p> <p>The \"Enable template tags\" option must be enabled in the block settings for the tags to be processed.</p> <p>Currently supported tags:</p>"},{"location":"course_authoring_guide/using_template_tags/#module_link","title":"module_link","text":"<p>Link to a module by its content index.</p>"},{"location":"course_authoring_guide/using_template_tags/#example","title":"Example","text":"<p>This HTML content entered in Composer:</p> <pre><code>...more about this in {{ module_link 3 }}....\n</code></pre> <p>...will generate HTML like:</p> <pre><code>...more about this in &lt;a href=\"/course/1/module/3/\"&gt;Module 3&lt;/a&gt;....\n</code></pre>"},{"location":"deployment/heroku/","title":"Heroku Deployment","text":""},{"location":"deployment/heroku/#background","title":"Background","text":"<p>KinesinLMS is a Django app that can be hosted on any Platform-as-a-Service (PaaS) that supports Django, such as Heroku, Fly.io or Render.com. (It can also be hosted on your own custom-built server or platform!)</p> <p>These instructions will describe setting up on Heroku, but the basic steps are the same for any PaaS.</p>"},{"location":"deployment/heroku/#heroku-pipelines","title":"Heroku Pipelines","text":"<p>Typically, there are three servers organized into a Heroku pipline:</p> <ul> <li>development -- for testing and debugging new features</li> <li>staging -- for team testing and validation of production-ready builds</li> <li>production -- the live server</li> </ul> <p>You can set the environment variable <code>HEROKU_PIPELINE</code> to explicitly declare which one you're on, so that KinesinLMS is made aware of which of these servers its running on and modify code accordingly. (E.g. when not running on the <code>PRODUCTION</code> pipeline, maybe only send emails to the developer.)</p>"},{"location":"deployment/heroku/#heroku-setup","title":"Heroku Setup","text":"<p>In this step will set up the Heroku apps for the three parts of our pipeline. We assume you have a Heroku account and have installed the Heroku CLI.</p> <p>Note that these instructions are based on Heroku set up steps provided by Django Cookiecutter. You can read those instructions here: https://cookiecutter-django.readthedocs.io/en/latest/deployment-on-heroku.html</p> <p>Create the Heroku apps for each step in our pipeline. Use the name of your app in place of <code>(your app name)</code> in the following</p> <pre><code>heroku create --buildpack heroku/python --remote development --app (your app name)-development\n\nheroku create --buildpack heroku/python --remote staging --app (your app name)-staging\n\nheroku create --buildpack heroku/python --remote production --app (your app name)\n</code></pre> <p>Set up each app in the pipeline. The following instructions are for the production app.</p>"},{"location":"deployment/heroku/#postgresql-setup","title":"PostgreSQL Setup","text":"<p>KinesinLMS uses PostgreSQL as its database. We'll use the Heroku PostgreSQL add-on.</p> <p>Create a PostgreSQL database: ::</p> <pre><code>heroku addons:create heroku-postgresql:mini --remote production\n</code></pre> <p>Schedule backups (since the 'mini' plan doesn't include automatic backups): ::</p> <pre><code>heroku pg:backups schedule --at '02:00 America/Los_Angeles' DATABASE_URL --remote production\n</code></pre> <p>...and then 'promote' the database to be our primary database: ::</p> <pre><code>heroku pg:promote DATABASE_URL --remote production\n</code></pre>"},{"location":"deployment/heroku/#redis-setup","title":"REDIS Setup","text":"<p>Parts of KinesinLMS use Redis for caching and other purposes, such as asynchronous tasks run by Celery.</p> <p>We'll use the Heroku Redis add-on: ::</p> <pre><code>heroku addons:create heroku-redis:mini --remote production\n\nheroku config:set CELERY_BROKER_URL=$(heroku config:get REDIS_TLS_URL) --remote production\n</code></pre>"},{"location":"deployment/heroku/#environment-veriables-setup","title":"Environment Veriables Setup","text":"<p>Now we set up some various environment variables that Django expects, as well as some custom ones we've created to configure our application. ::</p> <pre><code>heroku config:set PYTHONHASHSEED=random  --remote production\nheroku config:set WEB_CONCURRENCY=4  --remote production\nheroku config:set DJANGO_DEBUG=False  --remote production\nheroku config:set DJANGO_SETTINGS_MODULE=config.settings.production  --remote production\nheroku config:set DJANGO_SECRET_KEY=\"$(openssl rand -base64 64)\"  --remote production\nheroku config:set DJANGO_ADMIN_URL=\"$(openssl rand -base64 4096 | tr -dc 'A-HJ-NP-Za-km-z2-9' | head -c 32)/\" --remote production\n\nheroku config:set DJANGO_ALLOWED_HOSTS=kinesinlms.herokuapp.com  --remote production\n</code></pre> <p>If you want to use Google Analytics, set the following environment variable to your google analytics ID : ::</p> <pre><code>heroku config:set DJANGO_GOOGLE_ANALYTICS_ID=XXXXXXX  --remote production\n</code></pre>"},{"location":"deployment/heroku/#aws-access-setup","title":"AWS Access Setup","text":"<p>KinesinLMS expects to place static and media files in an AWS S3 bucket. So you'll need to create a bucket on AWS S3 to hold these assets, as well as an AWS IAM user with access to that bucket. Describing how to create these in AWS is outside the scope of this document, but you can read more about it here: https://simpleisbetterthancomplex.com/tutorial/2017/08/01/how-to-setup-amazon-s3-in-a-django-project.html</p> <p>Once you've created an S3 bucket for the KinesinLMS app and an IAM user with access to that bucket, create an access key and secret for that IAM user.</p> <p>The use those values to set the following environment values in the Heroku environment ::</p> <pre><code>heroku config:set DJANGO_AWS_ACCESS_KEY_ID=(your aws access key) --remote production\nheroku config:set DJANGO_AWS_SECRET_ACCESS_KEY=(some django aws secret access key) --remote production\nheroku config:set DJANGO_AWS_S3_REGION_NAME=us-west-1 --remote production\n</code></pre>"},{"location":"deployment/heroku/#custom-environment-variables-setup","title":"Custom Environment Variables Setup","text":"<p>There are a few custom environment variables that KinesinLMS uses to configure the application. We'll set those now:</p> <pre><code>heroku config:set DJANGO_PIPELINE=\"PRODUCTION\" --remote production\n</code></pre>"},{"location":"deployment/heroku/#pre-deploy-steps","title":"Pre-Deploy Steps","text":"<p>You're now ready to push the app to heroku. But before you do, make sure you've compiled your stylesheets, packaged your javascript, and basically got everything ready to go.</p>"},{"location":"deployment/heroku/#compile-stylesheets","title":"Compile Stylesheets","text":"<p>If there has been any changes to scss files, make sure they're compiled to css files.</p> <p>In an effort to keep things simple, there's an npm package.json command to watch scss files directly using sass. (You'll need sass installed on your machine.)</p> <p>To run sass in watch mode the 'watch-styles' npm command: ::</p> <pre><code>npm run watch-styles\n</code></pre> <p>When this command is run, all .sass files in the kinesinlms/static/sass directory will be watched and compiled to .css files in the kinesinlms/static/css directory.</p>"},{"location":"deployment/heroku/#package-javascript","title":"Package Javascript","text":"<p>Make sure all javascript-based components have been transpiled and packaged. (You'll need node and npm installed on your machine.) Note that this part of the build step is somewhat rudimentary and will be improved in the future.</p> <p>If you're pushing to production that means building minified javascript files: ::</p> <pre><code>npm run build\n</code></pre> <p>But if you want to debug on DEVELOPMENT or STAGING, create javascript with source maps ::</p> <pre><code>npm run dev\n</code></pre> <p>This will create compiled javascript files in kinesinlms/static/js.</p> <p>IMPORTANT: Make sure you add any new or updated files to github before continuing.</p>"},{"location":"deployment/heroku/#deploy-to-heroku","title":"Deploy to Heroku","text":"<p>IMPORTANT: Make sure you add any new or updated files from the previous steps to your git repository before continuing, otherwise they won't get pushed to Heroku in the next step.</p> <p>DOUBLY-IMPORTANT: Make sure all your tests are passing before pushing to production.</p> <p>Pushing your project to Heroku is as simple as pushing to github. ::</p> <pre><code>git push production master\n</code></pre>"},{"location":"deployment/heroku/#post-deploy","title":"Post-deploy","text":"<p>If you're setting up a server for the first time (or just cleaned out DEVELOPMENT and want to set up initial data), run the following management command to set up all initial data.</p> <p>For example if you're setting up DEVELOPMENT ::</p> <pre><code>heroku run python manage.py setup_all --remote development\n</code></pre> <p>Then set up a superuser so that you can log in and get to work on the Django admin screen:</p> <pre><code>heroku run python manage.py createsuperuser --remote development\n</code></pre>"},{"location":"email_automation/email_automation_overview/","title":"Email Automation Overview","text":"<p>Email automation providers are third-party services that allow you to send automated emails to your customers.</p> <p>You can configure KinesinLMS to send certain student activity events to your email automation provider. You can then set up automations in your email automation service to do certain things upon receiving these events, for example, sending a welcome email to a new student upon receiving an enrollment event, or a congratulations email upon receiving a course completion event.</p> <p>At the moment, KinesinLMS only supports one email automation provider: ActiveCampaign.</p> <p>But it should be relatively easy to add support for other providers by creating a new implementation of the <code>EmailAutomationProvider</code> base class.</p> <p>The next section will show you how to set up ActiveCampaign as your email automation provider.</p>"},{"location":"email_automation/provider_integration/","title":"Email Automation Provider Integration","text":"<p>This section explains how to set up an email automation provider. At the moment, this process is specific to ActiveCampaign, but it should be relatively easy to add support for other providers.</p>"},{"location":"email_automation/provider_integration/#activecampaign-credentials","title":"ActiveCampaign Credentials","text":"<p>The first step to integrating with an email automation service is creating an account and getting credentials required in order to use the API. If an email automation provdier is configured, KinesinLMS will use the service's API to send events to the email automation provider as students interact with the system. To do this, you'll need to obtain an API key and API URL from the provider.</p> <p>It's easy to create an ActiveCampaign test account and obtain API credentials. ActiveCampaign provides free developer accounts for testing purposes.</p>"},{"location":"email_automation/provider_integration/#setting-up-an-email-automation-provider-in-kinesinlms","title":"Setting Up an Email Automation Provider in KinesinLMS","text":"<p>Once you have your account, you can find your API credentials by logging into your account on ActiveCampaign and navigating to the \"Settings\" page and clicking on the \"Developer\" tab.</p> <p>You'll need both the \"API URL\" and the \"API Key\" shown on this page to configure KinesinLMS.</p> <p>KinesinLMS tries not to store secret information in the database, but rather expects you to set secrets as environment variables. This is a good practice for security reasons.</p> <p>In this case, you'll need to set the following environment variable based on the API key you've obtained from ActiveCampaign. If you're doing this in an .env file, you'll add a line in your file that looks like this:</p> <pre><code>EMAIL_AUTOMATION_PROVIDER_API_KEY=(your active campaign api key)\n</code></pre> <p>Then, after restarting and logging into KinesinLMS, go to the management &gt; email automation provider page. This page allows you to configure all other settings for your email automation provider connection.</p> <p>On this page, you'll see a simple form for turning on (via the \"Active\" checkbox) and managing your email automation provider connection. You'll need to set the \"type\" field to \"ActiveCampaign\" and the \"API URL\" to the value you obtained from ActiveCampaign.</p> <p>Note: Remember that this page doesn't provide a way to set the API key...you need to set the .env variable as explained agove. However, thispage will warn if you haven't set it in the environment.</p> <p>Save your changes, and you should be good to go! You can test your connection with the \"Test Connection\" button at the bottom of the page.</p> <p>You can safely ignore the Tag ids field. This field is used to store mappings from tags used in the email automation provider to their integer IDs. Unfortunately, some providers (like ActiveCampaign) require a developer to send tag IDs rather than just the tag itself during API calls. As it operates, KinesinLMS will automatically populate this field with the tag IDs it needs to send events to the email automation provider.</p> <p>But wait, you're not completely done yet. You still have to configure each course to send events to the email automation.</p>"},{"location":"email_automation/provider_integration/#setting-up-email-automation-provider-events-in-a-course","title":"Setting Up Email Automation Provider Events in a Course","text":"<p>To configure a course to send events to the email automation provider, go to the course's settings page and click on the \"Email Automations\" tab.</p> <p>On this page, you can activate the connection with the \"Active\" checkbox.</p> <p>You can also select which events you want to send to the email automation provider. At the moment, only three events are available for selection:</p> <ul> <li>User registration</li> <li>\"Course Enrolled\"</li> <li>\"Course Unenrolled\"</li> </ul>"},{"location":"forum/connecting_to_forum_service/","title":"Connecting KinesinLMS to the Forum Service","text":"<p>KinesinLMS is designed to support multiple forum providers, but currently only supports Discourse. In this section we describe how to configure KinesinLMS to use Discourse as its forum provider.</p> <p>You should already have a Discourse instance running. The first step is to log  into Discourse as the admin user and set up the necessary keys and webhooks.</p> <p>There are three main integration points between KinesinLMS and Discourse: - API for setup when a course is loaded - SSO for logins - Callback for forum activity to alert KinesinLMS of user post activity.</p> <p>Here we set up these integration points.</p>"},{"location":"forum/connecting_to_forum_service/#general-settings","title":"General Settings","text":"<p>Before we start, make sure you have some basic \"required\" Discourse settings established.</p> <p>In Admin &gt; Settings 'required' tab, set the fields to the best of your ability. - Set site description to something like \"My site's forums\" - Set short site description to something similar. - Search for \"duplicate\" and find the following two flags. Set them to checked (true):   - <code>allow duplicate topic titles</code>   - <code>allow duplicate topic titles category</code></p>"},{"location":"forum/connecting_to_forum_service/#api-key","title":"API Key","text":"<p>KinesinLMS communicates with Discourse via API when doing things like creating Groups, or creating new Categories, Subcategories and Topics for a newly added course.</p> <p>To do this, it needs an API key to be created on Discourse and then saved in the KinesinLMS.</p> <p>When logged into the Discourse instance, go to Amdin &gt; API and click the button 'New API Key'.</p> <p></p> <p>Set the following properties in the form:</p> <ul> <li>Description: \"KinesinLMS integration\"</li> <li>User level: \"Single User\"</li> <li>User: \"daniel\" (or whatever your admin user is)</li> <li>Scope: \"Global\"</li> </ul> <p>Then click the 'Save' button and copy the API key that is generated. This is the key you'll need to set in the KinesinLMS environment variable <code>FORUM_API_KEY</code>.</p>"},{"location":"forum/connecting_to_forum_service/#discourse-api-webhook","title":"Discourse API Webhook","text":"<p>In addition to the API key, you also need to set up a webhook in Discourse so that it notifies our KinesinLMS instance when a user posts something in the forum. </p> <p>On the same Admin &gt; API page, select the <code>Webhooks</code> tab and click the 'New Webhook' button.</p> <p>Set the following properties in the form:</p> <ul> <li>Payload URL: \"(your KinesinLMS instance URL)/forum/activity_callback\"</li> <li>If you're running locally, you'll use something like <code>https://localhost:8000/forum/activity_callback</code></li> <li>Content Type: \"application/json\"</li> <li>Secret: A secret key to help verify the webhook. </li> <li>Select the following events:</li> <li>All Topic Event checkboxes</li> <li>All Post Event checkboxes</li> <li>( you can select other events but you'll have to update the DiscourseService and DiscourseProvider class to handle them).</li> <li>At the bottom of the page, make sure the <code>Check TLS certificate of payload url</code> and <code>Active</code> checkboxes are checked.</li> </ul> <p></p> <p>IMPORTANT! Before you continue, make sure you now set the secret you used above in the <code>FORUM_CALLBACK_SECRET</code> environment variable for your KinesinLMS instance and restart it. This is necessary so that the KinesinLMS instance can verify the webhook request is coming from Discourse.</p>"},{"location":"forum/connecting_to_forum_service/#discourse-sso","title":"Discourse SSO","text":"<p>KinesinLMS uses Discourses' SSO feature so that users only have to sign in to KinesinLMS (Django) and can then access Discourse directly without another login.</p> <p>We need to set up SSO in Discourse however to make this work. Discourse used to call this feature \"Discourse SSO\" but now calls it \"DiscourseConnect\".</p> <p>On the Admin &gt; Settings page, enter DiscourseConnect in the search box.</p> <ul> <li>Set the <code>discourse connect url</code> field to <code>https://(your KinesinLMS instance URL)/forum/sso</code></li> <li>If you're running locally, you'll use something like <code>http://localhost:8000/discourse/sso</code></li> <li>Set the <code>site description</code> field to something like \"KinesinLMS\"</li> <li>Set the <code>discourse connect overrides bio</code> checkbox to checked</li> <li>Set the <code>discourse connect secret</code> field to a secret key for your KinesinLMS instance. </li> <li>The secret key should be the same as the <code>DISCOURSE_SSO_SECRET</code> environment variable for your KinesinLMS instance.'</li> </ul> <p>IMPORTANT! Before you continue, make sure you now set the SSO secret you used above in the <code>DISCOURSE_SSO_SECRET</code> environment variable for your KinesinLMS instance and restart it. This is necessary so that the KinesinLMS instance can verify the webhook request is coming from Discourse.</p>"},{"location":"forum/connecting_to_forum_service/#url","title":"URL","text":"<p>Update your env variable settings and restart the KinesinLMS instance so that it uses the new Docker-based  Discourse instance you've created. This will be <code>localhost:4200</code>  (unless you modified the container to be something else) : ::</p> <pre><code>DISCOURSE_BASE_URL=\"http://localhost:4200/\"\n</code></pre>"},{"location":"forum/connecting_to_forum_service/#sso","title":"SSO","text":"<p>We use the SSO feature so that users only have to sign in to KinesinLMS (Django) and can then access Discourse directly without another login.</p> <p>To enable SSO, enable (checkbox) the following two options in the settings &gt; login screen</p> <ul> <li>enable discourse Connect</li> <li>verbose discourse connect logging</li> <li>set the 'discourse connect url' to http://localhost:8000/forum/sso</li> <li>set the 'discourse connect secret' to something secret like <code>local_sso_connect</code></li> </ul> <p>In the local KinesinLMS :</p> <ul> <li>Set the FORUM_SSO_SECRET key to the secret just created in the last step</li> </ul>"},{"location":"forum/connecting_to_forum_service/#api","title":"API","text":"<p>KinesinLMS communicates with Discourse via API when doing things like creating Groups, Categories, Subcategories and Topics for a newly added course. So as part of any initial setup, you must create an API key in Discourse in the admin panel under the API Tab (/admin/api/keys)</p> <p>When logged into the local Discourse instance, go to Settings &gt; API and create a new API key:</p> <ul> <li>Description: \"KinesinLMS integration\"</li> <li>User level: \"daniel\"</li> <li>Global Key: True</li> </ul> <p>Then set the local <code>DISCOURSE_API_KEY</code> config variable to this key.</p> <p>Set <code>DISCOURSE_API_USERNAME</code> in the heroku environment to 'daniel' (because I use my admin user 'daniel' to create key.)</p>"},{"location":"forum/connecting_to_forum_service/#forum-activity-webhooks","title":"Forum Activity Webhooks","text":"<p>Create a new webhook in Settings &gt; API and set it to</p> <ul> <li>Payload URL = http://localhost:8000/discourse/activity_callback</li> <li>Content Type = \"application/json\"</li> <li>secret=(whatever DISCOURSE_CALLBACK_SECRET is defined as in the environment)\"</li> <li>select \"Topic Event\" and \"Post event\" as the only selected events for the callback.</li> </ul> <p>In the local Django env config, the env variable <code>DISCOURSE_CALLBACK_SECRET</code> to this secret value</p> <p>... ok now Discourse is connected and you can manage the integration via the KinesinLMS Management panel.</p>"},{"location":"forum/connecting_to_forum_service/#plugins","title":"Plugins","text":"<p>We use two 'components' in the KinesinLMS setup: - Brand Header Theme Component - Category Headers theme component</p> <p>To install these, go to Admin &gt; Customize &gt; Themes &gt; Components and then click \"Install.\"</p> <p>Search for the Brand Header component in the default options.</p> <p>For the Category Headers component, use this github repo: <code>https://github.com/naidihr/discourse-category-headers</code></p> <p>Make sure to set each component to Default theme.</p>"},{"location":"forum/connecting_to_forum_service/#styles","title":"Styles","text":"<p>We have some custom styles defined for our Discourse install as well as the HTMl elements that appear in some of the components. I've saved the most recent styles in <code>kinesinlms/forum/assets/discourse_styles.css</code> file. Take these style and copy them into the default stylesheet in Discourse.</p> <p>Go to Discourse &gt; Themes &gt; Edit CSS/HTML page and copy those style into that field.</p>"},{"location":"forum/connecting_to_forum_service/#other-settings","title":"Other Settings","text":"<p>There are some default configurations we set in Discourse to get the look and feel we want:</p>"},{"location":"forum/connecting_to_forum_service/#-desktop-category-page-style-categories-only","title":"- desktop category page style : Categories only","text":""},{"location":"forum/forum_models/","title":"Modeling the Form Provider","text":"<p>This section describes how the objects provided in Discourse are modeled and modified in KinsekinLMS, and how we access their representations in Discourse via the Discourse API.</p>"},{"location":"forum/forum_models/#modeling-discourse-objects","title":"Modeling Discourse Objects","text":"<p>To support forum discussions, Discourse provides \"Topics\" that are composed of a post and a number of replies. So whenever we have a discussion point in a course, we create a topic in Discourse.</p> <p>Discourse allows topics to be grouped into categories, so the first inclination would be to just put all topics for a course into a category and then we're done.</p> <p>However, when one wants to limit some topics to a particular cohort in a course, things get a bit more complicated.</p> <p>Discourse allows categories to be grouped into parent categories, so the solution we came up with was to make a category for each course and then a subcategory for each cohort in the course. Then, a copy of each topic is placed in that subcategory. (Background discussion here)</p> <p>In KinesinLMS, each course gets a DEFAULT cohort when it is created. And most courses only have that DEFAULT cohort, so this is not a big deal -- there will be one parent category in Discouse and one subcategory for the Discourse cohort.</p> <p>But if a course has multiple cohorts, then each cohort will need to have its own subcategory and a copy of each topic.</p> <p>This is a bit of a hack, but it works. And it allows us to use the Discourse API when a course is authored to create the category, subcategories and topics, and then when a course is run to create a subcategory and copy the topics for any new cohort created in the course.</p>"},{"location":"forum/forum_models/#discourse-api","title":"Discourse API","text":"<p>The Discourse API is a bit odd: sometimes it wants an ID, sometimes a name, and sometimes a slug.</p> <p>So in our models you'll often see two identifiers saved for a Discourse object: an ID and a name or an ID and a slug (depending on the model type). We then use one or the other in a particular API call.</p>"},{"location":"forum/forum_models/#discourse-groups","title":"Discourse Groups","text":"<p>Whenever we set up Discourse to host topics for a course, we first start by creating \"groups\" in Discourse into which we can add students as they enroll.</p> <p>Each course will get at least two Discourse groups:</p> <ul> <li>one group for all topics any enrolled student in this course can view.</li> <li>one group for each specific cohort in the course.</li> </ul> <p>For the 'cohort' group, we always add a Discourse group for the course's DEFAULT cohort. We then add a new group any time an author or admin adds a new cohort to the course.</p> <p>We follow a standard naming convention when creating a Discourse group for a cohort: [course token]co[cohort name].</p> <p>For example if you have a course with a token of DEMO_SP, then the Discourse group for the DEFAULT cohort will be named DEMO_SP_co_DEFAULT.</p> <p>Any other cohorts added to an KinesinLMS course should automatically get a new Discourse group created in Discourse and assigned to it through the CohortForumGroup model in Django.</p>"},{"location":"forum/forum_models/#django-models","title":"Django Models","text":"<p>The ForumTopic model is the main Django model to represent a topic in a course, and thereby in Discourse. This model is linked directly a Block of type FORUM_TOPIC. It stores the Discourse ID and Discourse slug for a topic (different Discourse endpoints use one or the other).</p> <p>Each time a FORUM_TOPIC block type is added to a course, KinesinLMS will need to use the Discourse API to create a new topic in Discourse for every subcategory in the course's main Discourse category.</p> <p>And every time a new cohort is added to a course, KinesinLMS will need to use the Discourse API to create new topics for every FORUM_TOPIC block in a course, creating them in the new cohort's corresponding Discourse subcategory.</p> <p>Unlike the Assessment model, ForumTopic is not in a one-to-one relationship with Block. This is because we need one ForumTopic instance for each Topic instance created in Discourse. And since we have to duplicate topics for every cohort (as explained above), we need a ForumTopic instance for every cohort.</p> <p>The ForumTopic model also has a many-to-one relationship with ForumSubcategory, to represent how these topics are grouped into the subcagegory in Discourse.</p> <p>The ForumSubcategory can be thought of as a \"proxy\" for the Discourse subcategory. It's type property defines whether it's a COHORT subcategory or an ALL_ENROLLED subcategory. It then has a foreign key to a CohortForumGroup (if it's a COHORT type) or a CourseForumGroup (if it's an ALL_ENROLLED type) to represent which group is allowed to view the topics in this subcategory.</p> <p>To limit users in Discourse to the correct topics, a Discourse group must be created for a course, and then an additional group for each cohort in the course. The CourseForumGroup and CohortForumGroup models represent these groups in KinesinLMS.</p> <p>If there is no need to segment topics by cohort, then there will only be one 'default' ForumSubcategory and one 'default' CohortForumGroup for a course. The <code>is_default</code> property for CohortForumGroup would be set to True. All cohorts for the course would then use the same default CohortForumGroup.</p> <p>A cohort in a course is linked to CohortForumGroup via the Cohort model's <code>cohort_forum_group</code> foreign key property.  This allows many cohorts in a course to use the same CohortForumGroup, such as in the scenario described above.</p>"},{"location":"forum/forum_overview/","title":"Forum Overview","text":"<p>KinesinLMS is designed to integrate with an external forum provider to provide forum services.</p> <p>Why not use a local app for forums? There are a number of Django apps that provide forum functionality, but in our experience none of them are as good as the dedicated forum providers. Therefore, KinesinLMS is designed to integrate with an external forum provider, and not to provide forum functionality.</p> <p>Since Discourse was used during KinesinLMS's early development, it is the only forum provider currently supported, and the data model leans heavily towards supporting Discourse. So a bit of work is probably in order to support a different forum provider.</p>"},{"location":"forum/forum_overview/#forumprovider-and-forumservice","title":"ForumProvider and ForumService","text":"<p>The ForumProvider is an abstract class that defines the properties of our external forum provider. The ForumService class defines methods to access that provider's functions via an API or webhooks. At the moment, only one concrete ForumProvider and ForumService is supported, Discourse. So the instructions in this section are specific to Discourse.</p> <p>It shouldn't be too difficult though if you want to create a new ForumProvider and ForumService for another forum, such as Misago.</p> <p>Futhermore, you may decide you want the forum to be a part of the KinesinLMS app, and not an external service. If so, it's probably not a far stretch however if you wanted to integrate something like django-machina as an app rather than rely on an external service.</p> <p>If you pursue either of these alternatives, let us know how it goes!</p>"},{"location":"forum/forum_overview/#apologies-extra-complexity","title":"Apologies: Extra Complexity!","text":"<p>Discourse has worked really well for us, but it does add some extra complexity to the development process.</p> <p>Unfortunately, the Discourse site does not have a way to create 'test' accounts, so when developing locally you'll need to set up a local instance of Discourse...which can be a pain and add complexity that we're trying hard to avoid. But it's not too bad, especially if you use Docker.</p> <p>Read on for more info...</p>"},{"location":"forum/local_setup/","title":"Local Discourse Setup","text":"<p>In order to use forums when developing locally, you'll need to set up a local instance of Discourse. This is because the Discourse website does not have a way to create 'test' accounts, so you'll need to create a local instance of Discourse and then link it to your local KinesinLMS instance.</p> <p>This kind of a pain, and of all the third-party services we use, Discourse is the only one that maybe should be replaced with a local implementation like django-machina.</p> <p>But the process is not too bad of a process if you use Docker.</p> <p>The following instructions are for docker on Mac OS...see the Discourse forum for other options.</p> <p>Note that once you have Discourse running locally in docker, you'll need to create a new user account and link the Discourse instance to your KinesinLMS instance. (This same configuration process needs to happen when linking a live Discourse instance to KinesinLMS staging or production instance.)</p>"},{"location":"forum/local_setup/#set-up-discourse-using-docker","title":"Set Up Discourse Using Docker","text":"<p>The following steps describe how you would set up Discourse for local development, using Docker.</p> <p>Discourse has a guide to setting up via Docker here : https://meta.discourse.org/docs?category=56&amp;tags=dev-install&amp;topic=102009</p> <p>The steps described there are listed below, but the Discourse page is likely more up to date, so check there first.</p> <p>First clone our fork of the Discourse repo to your local machine. We made one change to the <code>boot_dev</code> script to avoid an error when building the container when building on Mac OS. See the notes below for more info.</p> <pre><code>    git clone https://github.com/danielmcquillen/discourse.git\n</code></pre> <p>From there, <code>cd</code> into the newly created <code>discourse</code> the directory (cloned from github repo).</p> <p>Then, rely on a second hack (sigh) to avoid errors when building the container. Follow the steps noted here to create your own Discourse Docker container and resolve Node upgrade issues in the base Docker container for Discourse. Build that new container:</p> <pre><code>docker build -t discourse_node20 - &lt; Dockerfile\n</code></pre> <p>Now you can run the base commands to establish the container per the Discourse instructions in this post This does a one-time setup of the docker container ( via their symlink d -&gt; /bin/docker ).</p> <pre><code>    d/boot_dev --init\n</code></pre> <p>At the end of the <code>boot_dev</code> process, you'll be asked to create an admin user. Do that, giving it the same username as your superuser on the KinesinLMS instance you'll be linking to Discourse. For me, that user is <code>daniel</code>. Make sure to grant Admin privileges to the account when prompted. The process will look something like this:</p> <pre><code>    14:35 $ ./bin/docker/rake admin:create\n    Email:  daniel@mcquilleninteractive.com\n\n    Ensuring account is active!\n\n    Account updated successfully!\n    Do you want to grant Admin privileges to this account? (Y/n)  y\n\n    Your account now has Admin privileges!\n</code></pre> <p>Once the container is set up, anytime you want to run the container, run the following command ::</p> <p>First terminal ::</p> <pre><code>    d/rails s\n</code></pre> <p>Second terminal ::</p> <pre><code>    d/ember-cli\n</code></pre> <p>This runs the server on localhost:9292 ::</p> <pre><code>    http://localhost:4200/\n</code></pre> <p>IMPORTANT: Make sure to check notes in docs about steps you might need to do after the init step (e.g migrations)</p> <p>https://meta.discourse.org/t/beginners-guide-to-install-discourse-for-development-using-docker/102009</p>"},{"location":"forum/local_setup/#connecting-kinesinlms-to-discourse-locally","title":"Connecting KinesinLMS to Discourse Locally","text":"<p>In the above step you should have created a new user in Discourse with the same username as your admin user in KinesinLMS. For me, that user is <code>daniel</code>.</p> <p>You're now ready to connect KinesinLMS to Discourse. This is the same process regardless of whether you're running locally on in staging or production. Read on for details.</p>"},{"location":"forum/local_setup/#set-up-the-forum-provider","title":"Set up the Forum Provider","text":"<p>In KinesinLMS, go to Managment and click \"Configure\" in the Forum Provider card.</p> <p>The only way you can use this form is if you've set up the <code>FORUM_API_KEY</code> and <code>FORUM_SSO_SECRET</code> environment variables. If you haven't, the form will warn you to do so before proceeding.</p> <p>Make sure the \"Active\" checkbox at the top of the form is checked.</p> <p>For Forum url, enter <code>http://localhost:4200/</code> (or whatever the url is for your Discourse instance running in Docker)</p> <p>For Forum API username, enter the username of your admin user in KinesinLMS, which should be the same as what you used to create your admin in Discourse docker.</p>"},{"location":"forum/provider_integration/","title":"Forum Provider Integration","text":"<p>( Content to come...)</p>"},{"location":"import_export/overview/","title":"Importing and Exporting","text":"<p>KinesinLMS supports a limited set of import and export features. Courses and be exported and imported in a custom format and in the Common Cartridge format.</p> <p>Export and import options are available in the Composer section of the site, under the \"Course\" menu.</p>"},{"location":"import_export/overview/#exporting","title":"Exporting","text":"<p>Courses can be exported to one of two formats:</p>"},{"location":"import_export/overview/#kinesinlms-format","title":"KinesinLMS Format","text":"<p>This is a custom format used by KinesinLMS to export and import courses. It is a .zip file that contains a json data file and one or more directories for course resources or other data.</p>"},{"location":"import_export/overview/#common-cartridge","title":"Common Cartridge","text":"<p>Common Cartridge is a standard format for exporting and importing courses. It is a .zip file that contains a manifest file and one or more directories for course resources or other data.</p> <p>KinesinLMS currently exports a small subset of the Common Cartridge 1.3 format.</p>"},{"location":"import_export/overview/#importing","title":"Importing","text":"<p>Courses can be imported from one of two formats:</p> <ul> <li>KinesinLMS Format</li> <li>SCL Format (Science Communication Labs format)</li> </ul> <p>The import process will create a new course in the system and populate it with the content from the imported file. The import process will not overwrite any existing courses or content.</p>"},{"location":"import_export/overview/#kinesinlms-format_1","title":"KinesinLMS Format","text":"<p>This format should be a complete representation of a course exported from KinesinLMS. It is a .zip that contains everything one would need to recreate the course in KinesinLMS.</p>"},{"location":"import_export/overview/#scl-format","title":"SCL Format","text":"<p>This is the format exported from the precursor to KinesinLMS, the \"iBiology Courses\" site by Science Communication Labs (SCL).</p>"},{"location":"install/installation_overview/","title":"Installation Overview","text":"<p>KinesinLMS is a Django application implemented using teh best practices and conventions established by the (most excellent) Django cookie-cutter project.</p> <p>So setting it up is similar to setting up any Django project built from Django cookie-cutter, but with a few extra steps.</p>"},{"location":"install/local_setup/","title":"Local Setup","text":"<p>This page describes how to set up KinesinLMS on your local machine. It's biased towards Mac OS, but the steps are similar for other operating systems.</p>"},{"location":"install/local_setup/#virtual-environment","title":"Virtual Environment","text":"<p>Create a virtualenv for the project. On MacOS, with mkvirtualenv installed, you can do this with the following command (assuming your python3 is at <code>/usr/local/bin/python3</code>):</p> <pre><code>    mkvirtualenv --python=/usr/local/bin/python3 kinesinlms\n</code></pre> <p>If your environment isn't already activated, activate it:</p> <pre><code>workon kinesinlms\n</code></pre> <p>Next, install the project's python dependencies:</p> <pre><code>    pip install -r requirements/local.txt\n</code></pre> <p>After that, we'll install tools to help us build the project's javascript dependencies.</p> <p>Although KinesinLMS tries to keep any javascript build steps to a minimum, we still need to build a few javascript libraries from source definitions like those in <code>static/src/</code> and in <code>kinesinlms_components</code>. You will need to have npm and node installed to build these javascript and typescript source files.</p> <p>If you're on MacOS and you don't have those installed, you can install them with homebrew:</p> <pre><code>    brew install node\n</code></pre> <p>Then, install the project's javascript dependencies:</p> <pre><code>    npm install\n</code></pre> <p>And finally, build the client code:</p> <pre><code>    npm run build\n</code></pre> <p>This creates the bundled javascript files needed by the app (mainly for the advanced assessment tools like DiagramTool and TableTool).</p> <p>While you're working, you'll want the scss to compile to css automatically. You can do that with the following command:</p> <pre><code>    npm run watch-styles\n</code></pre>"},{"location":"install/local_setup/#set-up-environment-variables","title":"Set up environment variables","text":"<p>You'll need some basic enviroment variables set to run the project. These variables will looks slightly different when you're running locally as compared to when you're running in development, staging or production or your PaaS.</p> <p>When setting up to run locally, you can copy the example file <code>.env.example</code> to a file like <code>_envs/_local/django.env</code>, and then change the values as you wish (you'll need to know a bit about how Django uses these variables). Make sure to configure your IDE to use those variables when running the Django server, shell, or a management command.</p> <p>If you're using PyCharm, you can use the EnvFile plugin in the run configuration to read in the environment variables frmo a file.</p>"},{"location":"install/local_setup/#database","title":"Database","text":"<p>For this next step, you'll need postgres set up on your machine and running. If you don't have it installed, you can install it with homebrew:</p> <pre><code>    brew install postgres\n</code></pre> <p>Then, start the postgres server:</p> <pre><code>    brew services start postgres\n</code></pre> <p>Create a PostgreSQL database for our local development:</p> <pre><code>    psql -c \"CREATE DATABASE kinesinlms;\"\n</code></pre> <p>Then, migrate the database:</p> <pre><code>    python manage.py migrate\n</code></pre>"},{"location":"install/local_setup/#django-setup","title":"Django Setup","text":"<p>You'll probably want a Django superuser to manage the system, so create one now:</p> <pre><code>    python manage.py createsuperuser\n</code></pre> <p>You'll also need to set up some initial model instances and do a few other configuration steps to get the app ready. We've created a <code>setup_all</code> management command to do that. Feel free to extend that command to do other initial setup tasks you require.</p> <pre><code>    python manage.py setup_all\n</code></pre>"},{"location":"install/local_setup/#redis-setup","title":"Redis Setup","text":"<p>KinesinLMS uses Redis for for managing background tasks. You'll need to have Redis installed and running if you want to run these background tasks locally. Otherwise, you can set the <code>CELERY_TASK_ALWAYS_EAGER</code> setting to <code>True</code> in your local environment to run the tasks synchronously.</p> <p>If you don't have Redis installed, you can install it with homebrew:</p> <pre><code>    brew install redis\n</code></pre> <p>Then, start the Redis server:</p> <pre><code>    brew services start redis\n</code></pre> <p>You'll now need to run Celery as a separate task. You can do that with the following command in your project's root directory. Make sure all the environment variables are set before running this...especially <code>DJANGO_SETTINGS_MODULE=config.settings.local</code> ... just like when running Django.</p> <pre><code>    celery -A config worker -Q celery -l DEBUG\n</code></pre>"},{"location":"install/local_setup/#third-party-services","title":"Third-party Services","text":""},{"location":"install/local_setup/#discourse-forums","title":"Discourse Forums","text":"<p>If you're going to use Discourse as a forum service, you'll probably want to run Discourse, which isn't exactly easy, but is relatively straightforward if you're familiar with Docker. You can run a docker image of Discourse and configure it to look similar to your production environment.</p> <p>View the \"Local Setup\" page in the \"Forum\" section for more information.</p>"},{"location":"overview/acknowledgements/","title":"Acknowledgments","text":"<p>( Content to come ... )</p>"},{"location":"overview/acknowledgements/#project-funding","title":"Project Funding","text":"<p>( Content to come ... )</p>"},{"location":"overview/acknowledgements/#graphics-and-design","title":"Graphics and Design","text":"<p>( Content to come ... )</p>"},{"location":"overview/acknowledgements/#images","title":"Images","text":"<p>Front page image courtesy of BoliviaInteligente from Unsplash</p>"},{"location":"overview/guiding_principles/","title":"Guiding Principles","text":"<p>\"Whaa? Another LMS? There's already a thousand out there! Why one more?\"</p> <p>Yes, it's true. There are quite a few e-Learning systems a team can pick from. However, if you filter that list for certain features, licenses and programming languages, it drops to a much smaller list very quickly.</p> <p>Let's say you want a platform</p> <ol> <li>with a strong open-source license like AGPL</li> <li>...and developed with Python and Django</li> <li>...and focused on minimizing complexity so your small development team (probably one person) can manage the entire    project and add the interesting features you need quickly.</li> </ol> <p>Now that list is looking much smaller. And if you add in the requirement that the platform be designed to support e-Learning research projects, it's even more limited.</p> <p>We built KinesinLMS because we wanted a platform that met those criteria. We wanted a platform that was designed to be quickly and easily set up by small teams doing interesting e-learning research projects.</p> <p>What follows is a rough collection of the ideas and principles that guide KinesinLMS's development.</p>"},{"location":"overview/guiding_principles/#keep-things-simple","title":"Keep Things Simple","text":"<ul> <li>If there's a simple way to do something, do it that way even if it's not as snazzy.</li> <li>(But go ahead and be snazzy if it provides real user experience and learning benefit.)</li> <li>Try hard to keep developer workflows simple, especially building and publishing. Limit the number of   points where things can go wrong.</li> </ul>"},{"location":"overview/guiding_principles/#keep-code-understandable","title":"Keep Code Understandable","text":"<ul> <li>Good style: follow the Google Python Style guidelines.</li> <li>Simple style: don't use fancy features of the language if a simpler feature will do. Channel your inner Strunk and   White.</li> <li>Code comments: when you wade into the debate on whether to include more or less comments with a block of code, err   on the side the being obvious rather than being cryptically terse.</li> </ul>"},{"location":"overview/guiding_principles/#respect-user-privacy","title":"Respect User Privacy","text":"<ul> <li>By default, don't use third-party tracking services.</li> <li>Internal tracking should use anonymous identifiers as much as possible.</li> <li>It should be easy for an admin to remove a user from a system. It might not be possible to completely remove every   trace of activity (e.g. event logs), it should be possible to easily delete those things we can delete and for the   rest remove all identifying information.</li> </ul>"},{"location":"overview/introduction/","title":"Introduction","text":"<p>KinesinLMS is a Learning Management System (LMS) designed to be a simple, easy-to-use, and flexible platform for managing and delivering online courses. It's a 'just enough' LMS that you can use as a base for your e-Learning experiments and research projects.</p> <p>KinesinLMS is built on the Django web framework and uses standard open-source tools and libraries wherever possible:</p> <ul> <li>PostgresSQL for the database.</li> <li>Bootstrap for styles.</li> <li>Django Rest Framework for the API.</li> <li>Celery for asynchronous tasks.</li> </ul> <p>...and so on.</p> <p>For more complex things like badges, email automations, surveys and forums, KinesinLMS expects you'll use third-party services and therefore provides simple integrations for each...although there's nothing stopping you from creating your own custom implementations of these features.</p>"},{"location":"overview/introduction/#hypermedia-and-rich-interactions","title":"Hypermedia and \"Rich\" Interactions","text":"<p>KinesinLMS is opinionated about \"rich\" clients: it assumes that for most user interactions you can use \"hypermedia\" via HTMx to get immediate and engaging interactions without introducing a complicated front-end framework. Furthermore, using HTMx allows the developer to continue to use the simple (and effective) Django form classes rather than crafting custom APIs for every interaction.</p> <p>However, certain features like interactive assessments are useful, and will often require a more complex front-end. In that case we use React. But we try to keep the React components as simple as possible, and continually re-evaluate whether we need React and its build system at all. (Web components are another option we're considering to further reduce complexity.)</p> <p>We try to remember that the benefit of each \"rich\" interaction added to the platform must be balanced against the complexity it introduces, potentially increasing the number of developers who need to work on the project and decreasing the number of students who can access the course through their (potentially limited) mobile devices.</p>"},{"location":"overview/introduction/#background","title":"Background","text":"<p>KinesinLMS originated as a custom e-Learning platform developed by McQuillen Interactive for Science Communication Lab (SCL) as part of the iBiology Courses project. SCL funded the work with support from the National Institute for General Medical Sciences (grants #5R25GM116704 and</p>"},{"location":"overview/introduction/#1r25gm139147","title":"1R25GM139147).","text":"<p>iBiology Courses is an e-learning site dedicated to helping university students and post-graduate researchers become better scientists and enhance career and professional development. The iBiology Courses e-Learning platform was built from scratch after the team struggled to find a simple, agile and easily extensible platform for SCL's unique e-learning research goals.</p> <p>In 2023, SCL was funded by a supplementary NIH grant to make this custom e-Learning platform open source and available to the broader scientific community. KinesinLMS is the result of that effort!</p>"},{"location":"surveys/overview/","title":"Survey Overview","text":"<p>( Content to come...)</p>"},{"location":"surveys/provider_integration/","title":"Survey Provider Integration","text":"<p>( Content to come...)</p>"}]}